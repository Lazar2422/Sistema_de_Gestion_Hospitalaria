
// === Funciones Generales Reutilizables ===

function buscarPorCampo(coleccion, campo, valor) {
    return db[coleccion].find({ [campo]: valor }).toArray();
  }
  
  function buscarPorTexto(coleccion, campo, texto) {
    return db[coleccion].find({ [campo]: new RegExp(texto, 'i') }).toArray();
  }
  
  function buscarPorRangoFecha(coleccion, campoFecha, fechaInicio, fechaFin) {
    return db[coleccion].find({
      [campoFecha]: {
        $gte: new Date(fechaInicio),
        $lte: new Date(fechaFin)
      }
    }).toArray();
  }
  
  function contarPorCampo(coleccion, campo) {
    return db[coleccion].aggregate([
      { $group: { _id: `$${campo}`, total: { $sum: 1 } } }
    ]).toArray();
  }
  
  function sumarCampoPorGrupo(coleccion, campoAgrupacion, campoSuma) {
    return db[coleccion].aggregate([
      { $group: { _id: `$${campoAgrupacion}`, total: { $sum: `$${campoSuma}` } } }
    ]).toArray();
  }
  
  function buscarCamposVacios(coleccion, campo) {
    return db[coleccion].find({
      $or: [
        { [campo]: { $exists: false } },
        { [campo]: null }
      ]
    }).toArray();
  }
  
  function ultimosNDocumentos(coleccion, campoFecha, n) {
    return db[coleccion].find().sort({ [campoFecha]: -1 }).limit(n).toArray();
  }
  
  function topNPorValor(coleccion, campo, n) {
    return db[coleccion].find().sort({ [campo]: -1 }).limit(n).toArray();
  }
  
  function buscarPorLista(coleccion, campo, valores) {
    return db[coleccion].find({ [campo]: { $in: valores } }).toArray();
  }
  
  function unirColecciones(local, foranea, campoLocal, campoForaneo, alias) {
    return db[local].aggregate([
      {
        $lookup: {
          from: foranea,
          localField: campoLocal,
          foreignField: campoForaneo,
          as: alias
        }
      }
    ]).toArray();
  }
  
  // === Funciones Especializadas ===
  
  function obtenerHistoriaCompleta(idPaciente) {
    return db.HISTORIA_CLINICA.aggregate([
      { $match: { id_paciente: idPaciente } },
      {
        $lookup: {
          from: "DETALLE_HISTORIA",
          localField: "id_historia_clinica",
          foreignField: "id_historia_clinica",
          as: "detalles"
        }
      }
    ]).toArray();
  }
  
  function visitasPorMedico(idMedico) {
    return db.VISITAS_MEDICAS.find({ id_medico: idMedico }).toArray();
  }
  
  function pacientesPorGrupoEdad() {
    return contarPorCampo("PACIENTES", "GrupoEdad");
  }
  
  function totalTratamientosPorPaciente() {
    return contarPorCampo("TRATAMIENTOS", "id_paciente");
  }
  
  function totalFacturadoPorPaciente() {
    return sumarCampoPorGrupo("CUENTAS", "id_paciente", "Valor");
  }
  
  function medicamentosDisponibles() {
    return db.MEDICAMENTOS.find({ Disponible: true }).toArray();
  }
  
  function medicosConSalarioMayorA(valor) {
    return db.MEDICOS.find({ Salario: { $gt: valor } }).toArray();
  }
  
  function medicamentosConTipo() {
    return unirColecciones("MEDICAMENTOS", "TIPO_MEDICAMENTO", "id_tipo_medicamento", "id_tipo_medicamento", "tipo");
  }
  
  function pacientesConHistoriaClinica() {
    return db.HISTORIA_CLINICA.distinct("id_paciente");
  }
  
  function hospitalesPorEspecialidad() {
    return contarPorCampo("HOSPITALES", "id_especialidad");
  }
  